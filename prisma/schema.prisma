// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma
model Class {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  students  Student[]
  teachers  Teacher[] @relation("TeacherClasses")
  subject   Subject[] @relation("SubjectClasses")
}

model Subject {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  classes   Class[]   @relation("SubjectClasses")
  teachers  Teacher[] @relation("TeacherSubjects")
  Students  Student[]
}

model Teacher {
  id        Int      @id @default(autoincrement())
  firstname String
  lastname  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classes  Class[]   @relation("TeacherClasses")
  students Student[] @relation("TeacherStudents")
  subjects Subject[] @relation("TeacherSubjects")
}

model Student {
  id        Int      @id @default(autoincrement())
  firstname String
  lastname  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class   Class? @relation(fields: [classId], references: [id])
  classId Int?

  subject   Subject? @relation(fields: [subjectId], references: [id])
  subjectId Int?

  teacher   Teacher? @relation("TeacherStudents", fields: [teacherId], references: [id])
  teacherId Int?
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
